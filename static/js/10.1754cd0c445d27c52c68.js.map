{"version":3,"sources":["webpack:///./src/components/eco/eco.vue?3b16","webpack:///./src/components/eco/eco.vue","webpack:///./src/components/eco/util.js","webpack:///src/components/eco/eco.vue"],"names":["eco_eco","render","_vm","this","_h","$createElement","_c","_self","staticClass","directives","name","rawName","value","isDialogShow","expression","attrs","label-width","label","size","readonly","model","showData","callback","$$v","$set","_v","id","on","mousemove","mouseout","config","min","change","$event","renderMap","type","click","start","addVege","subVege","changeSeaLevel","title","center","visible","width","show-close","falseData","close-on-click-modal","close-on-press-escape","update:visible","max","step","slot","staticRenderFns","__vue_styles__","ssrContext","__webpack_require__","Component","normalizeComponent","eco","__webpack_exports__","data","methods","linearColorRGB","x1","r1","g1","b1","x2","r2","g2","b2","x","gap","arguments","length","undefined","rgb","r","Math","floor","g","b","inverseColorRGB","flag","cosOfTwoVector","y1","y2","sqrt","mapSize","blockPix","seaLevel","maxHeight","contourDistanceOfLand","contourDistanceOfOcean","contourDistanceOfVegetation","i","j","altitude","slope","overgroundWater","undergroundWater","vegetation","map","mixins","__WEBPACK_IMPORTED_MODULE_0__util_js__","mounted","domHeight","$","attr","css","initMap","Array","createMountain","waveGround","smoothLand","_i","_j","_i2","_j2","highestPos","lowestPos","createOvergroundWater","smoothOvergroundWater","createUndergroundWater","createVegetation","smoothVegetation","ctx","document","getElementById","getContext","rgbGround","fillStyle","rgbVege","fillRect","e","offsetX","offsetY","y","changeAltitude","beginX","beginY","endX","endY","changeUndergroundWater","changeOvergroundWater","changeVegetation","minPos","posLen","minHei","heiLen","minRan","ranLen","ridgeNum","valleyNum","number","createMountainCore","random","height","range","distance","cos","PI","n","vectorX","vectorY","_i3","_j3","_distance","directionX","directionY","tempX","tempY","_n","_vectorX","_vectorY","_i4","_j4","_distance2","_directionX","_directionY","_cos","_tempX","_tempY","createRiver","highestPosX","highestPosY","curX","curY","nextPos","_i5","_j5","_i6","_j6","log","canGrowVegetation","prob","pos","_i7","_j7","_random","_i8","_j8","_random2","map2","_i9","_j9","_i10","_j10","_i11","_j11","total","ii","jj","_i12","_j12","_i13","_j13","_i14","_j14","winding","seeding","_i15","_j15","times","exp","_i16","_j16","to"],"mappings":"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","file":"static/js/10.1754cd0c445d27c52c68.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"wrap\"},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(!_vm.isDialogShow),expression:\"!isDialogShow\"}],staticClass:\"board\"},[_c('div',{staticClass:\"ope\"},[_c('el-form',{attrs:{\"label-width\":\"60px\"}},[_c('el-form-item',{attrs:{\"label\":\"x\"}},[_c('el-input',{attrs:{\"size\":\"small\",\"readonly\":true},model:{value:(_vm.showData.x),callback:function ($$v) {_vm.$set(_vm.showData, \"x\", $$v)},expression:\"showData.x\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"y\"}},[_c('el-input',{attrs:{\"size\":\"small\",\"readonly\":true},model:{value:(_vm.showData.y),callback:function ($$v) {_vm.$set(_vm.showData, \"y\", $$v)},expression:\"showData.y\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"海拔\"}},[_c('el-input',{attrs:{\"size\":\"small\",\"readonly\":true},model:{value:(_vm.showData.altitude),callback:function ($$v) {_vm.$set(_vm.showData, \"altitude\", $$v)},expression:\"showData.altitude\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"坡度\"}},[_c('el-input',{attrs:{\"size\":\"small\",\"readonly\":true},model:{value:(_vm.showData.slope),callback:function ($$v) {_vm.$set(_vm.showData, \"slope\", $$v)},expression:\"showData.slope\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"地上水\"}},[_c('el-input',{attrs:{\"size\":\"small\",\"readonly\":true},model:{value:(_vm.showData.overgroundWater),callback:function ($$v) {_vm.$set(_vm.showData, \"overgroundWater\", $$v)},expression:\"showData.overgroundWater\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"地下水\"}},[_c('el-input',{attrs:{\"size\":\"small\",\"readonly\":true},model:{value:(_vm.showData.undergroundWater),callback:function ($$v) {_vm.$set(_vm.showData, \"undergroundWater\", $$v)},expression:\"showData.undergroundWater\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"植被\"}},[_c('el-input',{attrs:{\"size\":\"small\",\"readonly\":true},model:{value:(_vm.showData.vegetation),callback:function ($$v) {_vm.$set(_vm.showData, \"vegetation\", $$v)},expression:\"showData.vegetation\"}})],1)],1)],1),_vm._v(\" \"),_c('canvas',{attrs:{\"id\":\"c1\"},on:{\"mousemove\":_vm.mousemove,\"mouseout\":_vm.mouseout}}),_vm._v(\" \"),_c('div',{staticClass:\"ope\"},[_c('el-form',{attrs:{\"label-width\":\"100px\"}},[_c('el-form-item',{attrs:{\"label\":\"地图大小\"}},[_c('el-input',{attrs:{\"size\":\"small\",\"readonly\":true},model:{value:(_vm.config.mapSize),callback:function ($$v) {_vm.$set(_vm.config, \"mapSize\", $$v)},expression:\"config.mapSize\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"格子像素\"}},[_c('el-input',{attrs:{\"size\":\"small\",\"readonly\":true},model:{value:(_vm.config.blockPix),callback:function ($$v) {_vm.$set(_vm.config, \"blockPix\", $$v)},expression:\"config.blockPix\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"海平面\"}},[_c('el-input',{attrs:{\"size\":\"small\",\"readonly\":true},model:{value:(_vm.config.seaLevel),callback:function ($$v) {_vm.$set(_vm.config, \"seaLevel\", $$v)},expression:\"config.seaLevel\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"陆地等高距\"}},[_c('el-input-number',{attrs:{\"size\":\"small\",\"min\":1},on:{\"change\":function($event){_vm.renderMap()}},model:{value:(_vm.config.contourDistanceOfLand),callback:function ($$v) {_vm.$set(_vm.config, \"contourDistanceOfLand\", $$v)},expression:\"config.contourDistanceOfLand\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"海洋等高距\"}},[_c('el-input-number',{attrs:{\"size\":\"small\",\"min\":1},on:{\"change\":function($event){_vm.renderMap()}},model:{value:(_vm.config.contourDistanceOfOcean),callback:function ($$v) {_vm.$set(_vm.config, \"contourDistanceOfOcean\", $$v)},expression:\"config.contourDistanceOfOcean\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"植被等高距\"}},[_c('el-input-number',{attrs:{\"size\":\"small\",\"min\":1},on:{\"change\":function($event){_vm.renderMap()}},model:{value:(_vm.config.contourDistanceOfVegetation),callback:function ($$v) {_vm.$set(_vm.config, \"contourDistanceOfVegetation\", $$v)},expression:\"config.contourDistanceOfVegetation\"}})],1)],1)],1)]),_vm._v(\" \"),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(!_vm.isDialogShow),expression:\"!isDialogShow\"}],staticClass:\"btns\"},[_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":function($event){_vm.isDialogShow=true}}},[_vm._v(\"重开\")]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":function($event){_vm.start()}}},[_vm._v(\"重绘\")]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":function($event){_vm.addVege()}}},[_vm._v(\"植物传播\")]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":function($event){_vm.subVege()}}},[_vm._v(\"植物枯萎\")]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":function($event){_vm.changeSeaLevel(2)}}},[_vm._v(\"降雨\")]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":function($event){_vm.changeSeaLevel(-2)}}},[_vm._v(\"蒸发\")])],1),_vm._v(\" \"),_c('el-dialog',{attrs:{\"title\":\"新游戏\",\"center\":\"\",\"visible\":_vm.isDialogShow,\"width\":\"360px\",\"show-close\":_vm.falseData,\"close-on-click-modal\":_vm.falseData,\"close-on-press-escape\":_vm.falseData},on:{\"update:visible\":function($event){_vm.isDialogShow=$event}}},[_c('el-form',{attrs:{\"label-width\":\"100px\"}},[_c('el-form-item',{attrs:{\"label\":\"地图大小\"}},[_c('el-input-number',{attrs:{\"min\":10,\"max\":500,\"step\":10},model:{value:(_vm.config.mapSize),callback:function ($$v) {_vm.$set(_vm.config, \"mapSize\", $$v)},expression:\"config.mapSize\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"格子像素\"}},[_c('el-input-number',{attrs:{\"min\":1,\"max\":10,\"step\":1},model:{value:(_vm.config.blockPix),callback:function ($$v) {_vm.$set(_vm.config, \"blockPix\", $$v)},expression:\"config.blockPix\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"海平面\"}},[_c('el-input-number',{attrs:{\"min\":0,\"step\":2},model:{value:(_vm.config.seaLevel),callback:function ($$v) {_vm.$set(_vm.config, \"seaLevel\", $$v)},expression:\"config.seaLevel\"}})],1)],1),_vm._v(\" \"),_c('span',{attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":function($event){_vm.start()}}},[_vm._v(\"开始\")])],1)],1)],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.7.2@vue-loader/lib/template-compiler?{\"id\":\"data-v-494a0c16\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.7.2@vue-loader/lib/selector.js?type=template&index=0!./src/components/eco/eco.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/_extract-text-webpack-plugin@3.0.2@extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/_vue-loader@13.7.2@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-494a0c16\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../../node_modules/_vue-loader@13.7.2@vue-loader/lib/selector?type=styles&index=0!./eco.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/_vue-loader@13.7.2@vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/_vue-loader@13.7.2@vue-loader/lib/selector?type=script&index=0!./eco.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/_vue-loader@13.7.2@vue-loader/lib/selector?type=script&index=0!./eco.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/_vue-loader@13.7.2@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-494a0c16\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/_vue-loader@13.7.2@vue-loader/lib/selector?type=template&index=0!./eco.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-494a0c16\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/eco/eco.vue\n// module id = null\n// module chunks = ","export default {\r\n  data(){\r\n    return{\r\n\r\n    }\r\n  },\r\n  methods: {\r\n    linearColorRGB(x1,r1,g1,b1,x2,r2,g2,b2,x,gap=1) {\r\n      let rgb = {};\r\n      gap = gap<1 ? 1 : gap;\r\n      x = x-x%gap;\r\n      rgb.r = Math.floor((r2-r1)/(x2-x1)*x+(r1*x2-r2*x1)/(x2-x1));\r\n      rgb.g = Math.floor((g2-g1)/(x2-x1)*x+(g1*x2-g2*x1)/(x2-x1));\r\n      rgb.b = Math.floor((b2-b1)/(x2-x1)*x+(b1*x2-b2*x1)/(x2-x1));\r\n      return rgb;\r\n    },\r\n    inverseColorRGB(x1,r1,g1,b1,r2,g2,b2,flag,x,gap=1) {\r\n      let rgb = {};\r\n      gap = gap<1 ? 1 : gap;\r\n      x = x-x%gap;\r\n      rgb.r = Math.floor(r2-x1*(r2-r1)/((x-x1)/flag+x1));\r\n      rgb.g = Math.floor(g2-x1*(g2-g1)/((x-x1)/flag+x1));\r\n      rgb.b = Math.floor(b2-x1*(b2-b1)/((x-x1)/flag+x1));\r\n      return rgb;\r\n    },\r\n    cosOfTwoVector(x1,y1,x2,y2) {\r\n      let zi = x1*x2+y1*y2;\r\n      let mu = Math.sqrt((x1*x1+y1*y1)*(x2*x2+y2*y2));\r\n      return zi/mu;\r\n    }\r\n  }\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/eco/util.js","<template>\r\n  <div class=\"wrap\">\r\n    <div v-show=\"!isDialogShow\" class=\"board\">\r\n      <div class=\"ope\">\r\n        <el-form label-width=\"60px\">\r\n          <el-form-item label=\"x\">\r\n            <el-input size=\"small\" v-model=\"showData.x\" :readonly=\"true\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"y\">\r\n            <el-input size=\"small\" v-model=\"showData.y\" :readonly=\"true\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"海拔\">\r\n            <el-input size=\"small\" v-model=\"showData.altitude\" :readonly=\"true\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"坡度\">\r\n            <el-input size=\"small\" v-model=\"showData.slope\" :readonly=\"true\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"地上水\">\r\n            <el-input size=\"small\" v-model=\"showData.overgroundWater\" :readonly=\"true\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"地下水\">\r\n            <el-input size=\"small\" v-model=\"showData.undergroundWater\" :readonly=\"true\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"植被\">\r\n            <el-input size=\"small\" v-model=\"showData.vegetation\" :readonly=\"true\"></el-input>\r\n          </el-form-item>\r\n        </el-form>\r\n      </div>\r\n      <canvas id=\"c1\" @mousemove=\"mousemove\" @mouseout=\"mouseout\"></canvas>\r\n      <div class=\"ope\">\r\n        <el-form label-width=\"100px\">\r\n          <el-form-item label=\"地图大小\">\r\n            <el-input size=\"small\" v-model=\"config.mapSize\" :readonly=\"true\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"格子像素\">\r\n            <el-input size=\"small\" v-model=\"config.blockPix\" :readonly=\"true\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"海平面\">\r\n            <el-input size=\"small\" v-model=\"config.seaLevel\" :readonly=\"true\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"陆地等高距\">\r\n            <el-input-number size=\"small\" v-model=\"config.contourDistanceOfLand\" :min=\"1\" @change=\"renderMap()\"></el-input-number>\r\n          </el-form-item>\r\n          <el-form-item label=\"海洋等高距\">\r\n            <el-input-number size=\"small\" v-model=\"config.contourDistanceOfOcean\" :min=\"1\" @change=\"renderMap()\"></el-input-number>\r\n          </el-form-item>\r\n          <el-form-item label=\"植被等高距\">\r\n            <el-input-number size=\"small\" v-model=\"config.contourDistanceOfVegetation\" :min=\"1\" @change=\"renderMap()\"></el-input-number>\r\n          </el-form-item>\r\n        </el-form>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-show=\"!isDialogShow\" class=\"btns\">\r\n      <el-button type=\"primary\" @click=\"isDialogShow=true\">重开</el-button>\r\n      <el-button type=\"primary\" @click=\"start()\">重绘</el-button>\r\n      <el-button type=\"primary\" @click=\"addVege()\">植物传播</el-button>\r\n      <el-button type=\"primary\" @click=\"subVege()\">植物枯萎</el-button>\r\n      <el-button type=\"primary\" @click=\"changeSeaLevel(2)\">降雨</el-button>\r\n      <el-button type=\"primary\" @click=\"changeSeaLevel(-2)\">蒸发</el-button>\r\n    </div>\r\n\r\n    <el-dialog\r\n      title=\"新游戏\"\r\n      center\r\n      :visible.sync=\"isDialogShow\"\r\n      width=\"360px\"\r\n      :show-close=\"falseData\"\r\n      :close-on-click-modal=\"falseData\"\r\n      :close-on-press-escape=\"falseData\">\r\n      <el-form label-width=\"100px\">\r\n        <el-form-item label=\"地图大小\">\r\n          <el-input-number v-model=\"config.mapSize\" :min=\"10\" :max=\"500\" :step=\"10\"></el-input-number>\r\n        </el-form-item>\r\n        <el-form-item label=\"格子像素\">\r\n          <el-input-number v-model=\"config.blockPix\" :min=\"1\" :max=\"10\" :step=\"1\"></el-input-number>\r\n        </el-form-item>\r\n        <el-form-item label=\"海平面\">\r\n          <el-input-number v-model=\"config.seaLevel\" :min=\"0\" :step=\"2\"></el-input-number>\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"\">\r\n        <el-button type=\"primary\" @click=\"start()\">开始</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<style scoped lang=\"scss\">\r\n  .wrap{\r\n    width: 100vw;\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: center;\r\n    align-items: center;\r\n    .board{\r\n      display: flex;\r\n      flex-flow: row nowrap;\r\n      justify-content: center;\r\n      align-items: center;\r\n      .ope{\r\n        width: 300px;\r\n        height: 100%;\r\n        padding: 20px;\r\n        box-sizing: border-box;\r\n        background-color: #ddd;\r\n        .el-form-item{\r\n          margin-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n    .btns{\r\n      margin-top: 20px;\r\n    }\r\n  }\r\n</style>\r\n\r\n<script>\r\n  import utils from \"./util.js\"\r\n  export default {\r\n    name: \"eco\",\r\n    data(){\r\n      return{\r\n        isDialogShow: true,\r\n        falseData: false,\r\n        config: {\r\n          mapSize: 100,\r\n          blockPix: 6,\r\n          seaLevel: 40,\r\n          maxHeight: 0,\r\n          contourDistanceOfLand: 16,\r\n          contourDistanceOfOcean: 4,\r\n          contourDistanceOfVegetation: 4,\r\n        },\r\n        showData: {\r\n          i: \"\",\r\n          j: \"\",\r\n          altitude: \"\",\r\n          slope: \"\",\r\n          overgroundWater: \"\",\r\n          undergroundWater: \"\",\r\n          vegetation: \"\",\r\n        },\r\n        map: [],\r\n      }\r\n    },\r\n    mixins: [utils],\r\n    mounted(){\r\n\r\n    },\r\n    methods: {\r\n      start(){\r\n        this.isDialogShow = false;\r\n\r\n        //初始化dom大小\r\n        let domHeight = this.config.mapSize * this.config.blockPix;\r\n        $(\"#c1\").attr(\"width\", domHeight).attr(\"height\", domHeight);\r\n        $(\".board\").css(\"height\", domHeight);\r\n\r\n        this.initMap();\r\n        this.renderMap();\r\n      },\r\n      initMap(){\r\n        //初始化数组\r\n        this.map = new Array(this.config.mapSize);\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          this.map[i] = new Array(this.config.mapSize);\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            this.map[i][j] = {\r\n              i: i,\r\n              j: j,\r\n              altitude: 0,\r\n              slope: 0,\r\n              overgroundWater: 0,\r\n              undergroundWater: 0,\r\n              vegetation: 0,\r\n            };\r\n          }\r\n        }\r\n\r\n        //----生成地形\r\n        //大山\r\n        this.createMountain(this.config.mapSize/4,this.config.mapSize/4*2,80,160,this.config.mapSize/6,this.config.mapSize/8,3,2,1);\r\n        //小山\r\n        this.createMountain(this.config.mapSize/6,this.config.mapSize/6*4,30,30,this.config.mapSize/6,this.config.mapSize/6,1,1,6);\r\n        //凹凸\r\n        this.createMountain(0,this.config.mapSize,5,20,5,15,0,0,30);\r\n        this.createMountain(0,this.config.mapSize,20,30,10,5,0,0,10);\r\n        //大陆板块\r\n        this.createMountain(this.config.mapSize/8,this.config.mapSize/8*6,16,16,this.config.mapSize/3,this.config.mapSize/3,1,0,5);\r\n\r\n        //陆地波动\r\n        this.waveGround();\r\n\r\n        //平整陆地\r\n        this.smoothLand();\r\n\r\n        //设置最大高度\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            this.config.maxHeight = Math.max(this.config.maxHeight, this.map[i][j].altitude);\r\n          }\r\n        }\r\n\r\n        //设置坡度\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            this.map[i][j].slope=(this.highestPos(i,j,1).altitude-this.lowestPos(i,j,1).altitude)/2;\r\n          }\r\n        }\r\n\r\n        //----生成水分\r\n        //根据海平面高度填充地上水，无需地下水\r\n        this.createOvergroundWater();\r\n\r\n        //生成河流\r\n        // this.createRiver(this.config.mapSize/10,6);\r\n        // this.createRiver(this.config.mapSize/2,3);\r\n        // this.createRiver(this.config.mapSize/2,3);\r\n\r\n        //平整河水\r\n        this.smoothOvergroundWater(1);\r\n        this.smoothOvergroundWater(3);\r\n\r\n        //生成地下水\r\n        this.createUndergroundWater();\r\n\r\n        //----生成植被\r\n        //生成植被\r\n        this.createVegetation();\r\n\r\n        //平整植被\r\n        this.smoothVegetation(1);\r\n\r\n      },\r\n      renderMap(){\r\n        let ctx = document.getElementById(\"c1\").getContext(\"2d\");\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            let rgb = null;\r\n            let rgbGround=this.linearColorRGB(this.config.seaLevel,240,219,130, 350,74,47,0, this.map[i][j].altitude,this.config.contourDistanceOfLand);\r\n            if(this.map[i][j].overgroundWater>5){\r\n              //深水\r\n              rgb=this.linearColorRGB(this.config.seaLevel,0,0,60, 5,120,223,233, this.map[i][j].overgroundWater,this.config.contourDistanceOfOcean);\r\n              ctx.fillStyle=\"rgb(\"+rgb.r+\",\"+rgb.g+\",\"+rgb.b+\")\";\r\n            } else if(this.map[i][j].vegetation>0){\r\n              //植被\r\n              let rgbVege=this.linearColorRGB(0,1,125,10, 200,78,60,16, this.map[i][j].altitude);\r\n              rgb=this.linearColorRGB(25,rgbVege.r,rgbVege.g,rgbVege.b, 0,rgbGround.r,rgbGround.g,rgbGround.b, this.map[i][j].vegetation,this.config.contourDistanceOfVegetation);\r\n              ctx.fillStyle=\"rgb(\"+rgb.r+\",\"+rgb.g+\",\"+rgb.b+\")\";\r\n            } else if(this.map[i][j].overgroundWater>0){\r\n              //浅水\r\n              rgb=this.linearColorRGB(5,120,223,233, 0,rgbGround.r,rgbGround.g,rgbGround.b, this.map[i][j].overgroundWater, 1); //等高距默认1\r\n              ctx.fillStyle=\"rgb(\"+rgb.r+\",\"+rgb.g+\",\"+rgb.b+\")\";\r\n            } else {\r\n              //陆地\r\n              rgb = rgbGround;\r\n              ctx.fillStyle=\"rgb(\"+rgb.r+\",\"+rgb.g+\",\"+rgb.b+\")\";\r\n            }\r\n            ctx.fillRect(i*this.config.blockPix,j*this.config.blockPix,this.config.blockPix,this.config.blockPix);\r\n          }\r\n        }\r\n      },\r\n      mousemove(e){\r\n        let i = Math.floor(e.offsetX/this.config.blockPix);\r\n        let j = Math.floor(e.offsetY/this.config.blockPix);\r\n        i=Math.max(0,Math.min(this.config.mapSize-1,i));\r\n        j=Math.max(0,Math.min(this.config.mapSize-1,j));\r\n        this.showData.x = i;\r\n        this.showData.y = j;\r\n        this.showData.altitude = this.map[i][j].altitude;\r\n        this.showData.slope = this.map[i][j].slope;\r\n        this.showData.overgroundWater = this.map[i][j].overgroundWater;\r\n        this.showData.undergroundWater = this.map[i][j].undergroundWater;\r\n        this.showData.vegetation = this.map[i][j].vegetation;\r\n      },\r\n      mouseout(e){\r\n        this.showData.x = \"\";\r\n        this.showData.y = \"\";\r\n        this.showData.altitude = \"\";\r\n        this.showData.slope = \"\";\r\n        this.showData.overgroundWater = \"\";\r\n        this.showData.undergroundWater = \"\";\r\n        this.showData.vegetation = \"\";\r\n      },\r\n      changeAltitude(beginX, beginY, endX, endY, value) {\r\n        beginX = Math.max(Math.floor(beginX),0);\r\n        beginY = Math.max(Math.floor(beginY),0);\r\n        endX = Math.min(Math.floor(endX), this.config.mapSize-1);\r\n        endY = Math.min(Math.floor(endY), this.config.mapSize-1);\r\n        for(let i=beginX;i<=endX;i++)\r\n          for(let j=beginY;j<=endY;j++)\r\n            this.map[i][j].altitude+=value;\r\n      },\r\n      changeUndergroundWater(beginX, beginY, endX, endY, value) {\r\n        beginX = Math.max(Math.floor(beginX),0);\r\n        beginY = Math.max(Math.floor(beginY),0);\r\n        endX = Math.min(Math.floor(endX), this.config.mapSize-1);\r\n        endY = Math.min(Math.floor(endY), this.config.mapSize-1);\r\n        for(let i=beginX;i<=endX;i++)\r\n          for(let j=beginY;j<=endY;j++)\r\n            this.map[i][j].undergroundWater+=value;\r\n      },\r\n      changeOvergroundWater(beginX, beginY, endX, endY, value) {\r\n        beginX = Math.max(Math.floor(beginX),0);\r\n        beginY = Math.max(Math.floor(beginY),0);\r\n        endX = Math.min(Math.floor(endX), this.config.mapSize-1);\r\n        endY = Math.min(Math.floor(endY), this.config.mapSize-1);\r\n        for(let i=beginX;i<=endX;i++)\r\n          for(let j=beginY;j<=endY;j++)\r\n            this.map[i][j].overgroundWater+=value;\r\n      },\r\n      changeVegetation(beginX, beginY, endX, endY, value) {\r\n        beginX = Math.max(Math.floor(beginX),0);\r\n        beginY = Math.max(Math.floor(beginY),0);\r\n        endX = Math.min(Math.floor(endX), this.config.mapSize-1);\r\n        endY = Math.min(Math.floor(endY), this.config.mapSize-1);\r\n        for(let i=beginX;i<=endX;i++)\r\n          for(let j=beginY;j<=endY;j++)\r\n            this.map[i][j].vegetation+=value;\r\n      },\r\n      createMountain(minPos, posLen, minHei, heiLen, minRan, ranLen, ridgeNum, valleyNum, number){\r\n        for(let i=0;i<number;i++)\r\n          this.createMountainCore(minPos, posLen, minHei, heiLen, minRan, ranLen, ridgeNum, valleyNum);\r\n      },\r\n      createMountainCore(minPos, posLen, minHei, heiLen, minRan, ranLen, ridgeNum, valleyNum) {\r\n        let x = minPos+Math.floor(Math.random()*posLen),\r\n          y = minPos+Math.floor(Math.random()*posLen),\r\n          height = minHei+Math.random()*heiLen,\r\n          range = minRan+Math.floor(Math.random()*ranLen);\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            let distance = Math.sqrt((x-i)*(x-i)+(y-j)*(y-j));\r\n            if(distance<=range)\r\n              this.map[i][j].altitude+=(Math.cos(distance*Math.PI/range)+1)*height/2;\r\n            if(distance<=range*4/3)\r\n              this.map[i][j].altitude+=Math.random()*height/40;\r\n          }\r\n        }\r\n        //山脊\r\n        for(let n=0;n<ridgeNum;n++){\r\n          let vectorX = Math.random()-0.5, vectorY = Math.random()-0.5;\r\n          for(let i=0;i<this.config.mapSize;i++){\r\n            for(let j=0;j<this.config.mapSize;j++){\r\n              let distance = Math.sqrt((i-x)*(i-x)+(j-y)*(j-y));\r\n              let directionX = i-x, directionY = j-y;\r\n              let cos = this.cosOfTwoVector(directionX,directionY,vectorX,vectorY);\r\n              if(distance<=range*0.8 && cos>0.9995) {\r\n                let tempX = i+(2*Math.random()-1)*distance/8;\r\n                let tempY = j+(2*Math.random()-1)*distance/8;\r\n                this.changeAltitude(tempX-distance/10,\r\n                  tempY-distance/10,\r\n                  tempX+distance/10,\r\n                  tempY+distance/10,\r\n                  1-1/(distance+1));\r\n              }\r\n            }\r\n          }\r\n        }\r\n        //山谷\r\n        for(let n=0;n<valleyNum;n++){\r\n          let vectorX = Math.random()-0.5, vectorY = Math.random()-0.5;\r\n          for(let i=0;i<this.config.mapSize;i++){\r\n            for(let j=0;j<this.config.mapSize;j++){\r\n              let distance = Math.sqrt((i-x)*(i-x)+(j-y)*(j-y));\r\n              let directionX = i-x, directionY = j-y;\r\n              let cos = this.cosOfTwoVector(directionX,directionY,vectorX,vectorY);\r\n              if(distance<=range*0.8 && cos>0.9995) {\r\n                let tempX = i+(2*Math.random()-1)*distance/8;\r\n                let tempY = j+(2*Math.random()-1)*distance/8;\r\n                this.changeAltitude(tempX-distance/10,\r\n                  tempY-distance/10,\r\n                  tempX+distance/10,\r\n                  tempY+distance/10,\r\n                  -1+1/(distance+1));\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      createRiver(range, width) {\r\n        let highestPos = this.highestPos(this.config.mapSize/2, this.config.mapSize/2, this.config.mapSize/2);\r\n        let highestPosX = highestPos.x;\r\n        let highestPosY = highestPos.y;\r\n        // console.log(\"最高点：\", highestPosX, highestPosY);\r\n        let curX, curY;\r\n        do{\r\n          curX=highestPosX+Math.floor(Math.random()*range*2-range);\r\n          curY=highestPosY+Math.floor(Math.random()*range*2-range);\r\n          curX=Math.max(0,Math.min(this.config.mapSize-1,curX));\r\n          curY=Math.max(0,Math.min(this.config.mapSize-1,curY));\r\n          // console.log(\"河流生成点：\", curX, curY);\r\n        } while (this.map[curX][curY].overgroundWater > 0);\r\n        // console.log(\"最终河流生成点：\", curX, curY);\r\n        while(curX>=0 && curY>=0 && curX<=this.config.mapSize-1 && curY<=this.config.mapSize-1 &&\r\n        this.map[curX][curY].altitude>this.config.seaLevel && this.map[curX][curY].overgroundWater<15){\r\n          this.changeOvergroundWater(curX-width/2,curY-width/2,curX+width/2,curY+width/2,width*10/(10+this.map[curX][curY].slope));\r\n          let nextPos = this.lowestPos(curX,curY,width);\r\n          if(nextPos.x==curX && nextPos.y==curY)\r\n            break;\r\n          curX=Math.floor((curX+nextPos.x)/2+Math.random()*width-width/2);\r\n          curY=Math.floor((curY+nextPos.y)/2+Math.random()*width-width/2);\r\n          //curX=nextPos.x+Math.floor(Math.random()*width-width/2);\r\n          //curY=nextPos.y+Math.floor(Math.random()*width-width/2);\r\n        }\r\n      },\r\n      createOvergroundWater(){\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            this.map[i][j].overgroundWater = 0;\r\n          }\r\n        }\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            if(this.config.seaLevel-this.map[i][j].altitude>0){\r\n              this.map[i][j].overgroundWater = this.config.seaLevel-this.map[i][j].altitude;\r\n              this.map[i][j].vegetation = 0;\r\n            } else {\r\n              this.map[i][j].overgroundWater = 0;\r\n            }\r\n          }\r\n        }\r\n      },\r\n      createUndergroundWater(){\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            this.map[i][j].undergroundWater = 0;\r\n          }\r\n        }\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            if(this.map[i][j].overgroundWater>0){\r\n              let range = this.map[i][j].slope + this.map[i][j].overgroundWater/3;\r\n              this.changeUndergroundWater(i-range,j-range,i+range,j+range,Math.log(this.map[i][j].overgroundWater/50+1));\r\n            }\r\n          }\r\n        }\r\n      },\r\n      createVegetation() {\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            //植物生长条件：\r\n            //基准值 1/5\r\n            //地上水<0.1  y=-10x+1  线性  0~1\r\n            //地下水>0  y=5*ln(x+1)  对数  0~+∞\r\n            //海拔高生成少  y=200/(x+200)  反比例  1~+0\r\n            //随机数 0.9~1.1\r\n            //概率  y=v/(v+4)  反比例  0~1\r\n            if(this.canGrowVegetation(i, j)){\r\n              let value= 1/5\r\n                *(5*Math.log(this.map[i][j].undergroundWater+1))\r\n                *(-10*this.map[i][j].overgroundWater+1)\r\n                *(200/((this.map[i][j].altitude-this.config.seaLevel)+200))\r\n                *(Math.random()/5+0.9);\r\n              let prob=value/(value+3);\r\n              if(Math.random()<prob){\r\n                let range=value;\r\n                this.changeVegetation(i-range,j-range,i+range,j+range,value);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      canGrowVegetation(i, j){\r\n        return (this.map[i][j].overgroundWater<0.1 && this.map[i][j].undergroundWater>0);\r\n      },\r\n      highestPos(x,y,range) {\r\n        let pos={}, max=-10086;\r\n        let beginX=Math.max(0,x-range),\r\n          beginY=Math.max(0,y-range),\r\n          endX=Math.min(this.config.mapSize-1,x+range),\r\n          endY=Math.min(this.config.mapSize-1,y+range);\r\n        for(let i=beginX;i<=endX;i++)\r\n          for(let j=beginY;j<=endY;j++)\r\n            if(this.map[i][j].altitude>max){\r\n              max=this.map[i][j].altitude;\r\n              pos.x=i;\r\n              pos.y=j;\r\n              pos.altitude=max;\r\n            }\r\n        return pos;\r\n      },\r\n      lowestPos(x,y,range) {\r\n        let pos={}, min=this.config.maxHeight;\r\n        let beginX=Math.max(0,x-range),\r\n          beginY=Math.max(0,y-range),\r\n          endX=Math.min(this.config.mapSize-1,x+range),\r\n          endY=Math.min(this.config.mapSize-1,y+range);\r\n        for(let i=beginX;i<=endX;i++)\r\n          for(let j=beginY;j<=endY;j++)\r\n            if(this.map[i][j].altitude<min){\r\n              min=this.map[i][j].altitude;\r\n              pos.x=i;\r\n              pos.y=j;\r\n              pos.altitude=min;\r\n            }\r\n        return pos;\r\n      },\r\n      waveGround() {\r\n        //1随机\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            let random = Math.floor(Math.random()*10);\r\n            this.map[i][j].altitude+=random;\r\n          }\r\n        }\r\n        //2随机\r\n        for(let i=0;i<this.config.mapSize;i+=2){\r\n          for(let j=0;j<this.config.mapSize;j+=2){\r\n            let random = Math.floor(Math.random()*6);\r\n            this.changeAltitude(i,j,i+1,j+1,random);\r\n          }\r\n        }\r\n        //4随机\r\n        for(let i=0;i<this.config.mapSize;i+=4){\r\n          for(let j=0;j<this.config.mapSize;j+=4){\r\n            let random = Math.floor(Math.random()*2);\r\n            this.changeAltitude(i,j,i+3,j+3,random);\r\n          }\r\n        }\r\n      },\r\n      smoothLand() {\r\n        //默认range=1\r\n        let map2 = new Array(this.config.mapSize);\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          map2[i] = new Array(this.config.mapSize);\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            map2[i][j]={};\r\n            map2[i][j].altitude=this.map[i][j].altitude;\r\n          }\r\n        }\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            if(i==0 && j==0)\r\n              map2[i][j].altitude=(this.map[i][j].altitude+ this.map[i][j+1].altitude +\r\n                this.map[i+1][j].altitude+ this.map[i+1][j+1].altitude)/4;\r\n            else if(i==this.config.mapSize-1 && j==0)\r\n              map2[i][j].altitude=(this.map[i-1][j].altitude + this.map[i-1][j+1].altitude +\r\n                this.map[i][j].altitude+ this.map[i][j+1].altitude)/4;\r\n            else if(i==0 && j==this.config.mapSize-1)\r\n              map2[i][j].altitude=(this.map[i][j-1].altitude + this.map[i][j].altitude +\r\n                this.map[i+1][j-1].altitude + this.map[i+1][j].altitude)/4;\r\n            else if(i==this.config.mapSize-1 && j==this.config.mapSize-1)\r\n              map2[i][j].altitude=(this.map[i-1][j-1].altitude + this.map[i-1][j].altitude +\r\n                this.map[i][j-1].altitude + this.map[i][j].altitude)/4;\r\n            else if(i==0)\r\n              map2[i][j].altitude=(this.map[i][j-1].altitude + this.map[i][j].altitude+ this.map[i][j+1].altitude +\r\n                this.map[i+1][j-1].altitude + this.map[i+1][j].altitude+ this.map[i+1][j+1].altitude)/6;\r\n            else if(i==this.config.mapSize-1)\r\n              map2[i][j].altitude=(this.map[i-1][j-1].altitude + this.map[i-1][j].altitude + this.map[i-1][j+1].altitude +\r\n                this.map[i][j-1].altitude + this.map[i][j].altitude+ this.map[i][j+1].altitude)/6;\r\n            else if(j==0)\r\n              map2[i][j].altitude=(this.map[i-1][j].altitude + this.map[i-1][j+1].altitude +\r\n                this.map[i][j].altitude+ this.map[i][j+1].altitude +\r\n                this.map[i+1][j].altitude+ this.map[i+1][j+1].altitude)/6;\r\n            else if(j==this.config.mapSize-1)\r\n              map2[i][j].altitude=(this.map[i-1][j-1].altitude + this.map[i-1][j].altitude +\r\n                this.map[i][j-1].altitude + this.map[i][j].altitude +\r\n                this.map[i+1][j-1].altitude + this.map[i+1][j].altitude)/6;\r\n            else map2[i][j].altitude=(this.map[i-1][j-1].altitude + this.map[i-1][j].altitude + this.map[i-1][j+1].altitude +\r\n                this.map[i][j-1].altitude + this.map[i][j].altitude+ this.map[i][j+1].altitude +\r\n                this.map[i+1][j-1].altitude + this.map[i+1][j].altitude+ this.map[i+1][j+1].altitude)/9;\r\n          }\r\n        }\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            this.map[i][j].altitude=map2[i][j].altitude;\r\n          }\r\n        }\r\n      },\r\n      smoothOvergroundWater(range) {\r\n        let map2 = new Array(this.config.mapSize);\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          map2[i] = new Array(this.config.mapSize);\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            map2[i][j]={};\r\n            map2[i][j].overgroundWater=this.map[i][j].overgroundWater;\r\n          }\r\n        }\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            if(this.map[i][j].altitude>this.config.seaLevel-range){\r\n              let beginX=Math.max(0,i-range),beginY=Math.max(0,j-range),\r\n                endX=Math.min(this.config.mapSize-1,i+range),endY=Math.min(this.config.mapSize-1,j+range);\r\n              let total=0;\r\n              for(let ii=beginX;ii<=endX;ii++)\r\n                for(let jj=beginY;jj<=endY;jj++)\r\n                  total+=this.map[ii][jj].overgroundWater;\r\n              map2[i][j].overgroundWater=total/(range+range+1)/(range+range+1);\r\n            }\r\n          }\r\n        }\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            this.map[i][j].overgroundWater=map2[i][j].overgroundWater;\r\n          }\r\n        }\r\n      },\r\n      smoothVegetation(range) {\r\n        let map2 = new Array(this.config.mapSize);\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          map2[i] = new Array(this.config.mapSize);\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            map2[i][j]={};\r\n            map2[i][j].vegetation=this.map[i][j].vegetation;\r\n          }\r\n        }\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            if(this.map[i][j].overgroundWater<0.5){\r\n              let beginX=Math.max(0,i-range),beginY=Math.max(0,j-range),\r\n                endX=Math.min(this.config.mapSize-1,i+range),endY=Math.min(this.config.mapSize-1,j+range);\r\n              let total=0;\r\n              for(let ii=beginX;ii<=endX;ii++)\r\n                for(let jj=beginY;jj<=endY;jj++)\r\n                  total+=this.map[ii][jj].vegetation;\r\n              map2[i][j].vegetation=total/(range+range+1)/(range+range+1);\r\n            }\r\n          }\r\n        }\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            this.map[i][j].vegetation=map2[i][j].vegetation;\r\n          }\r\n        }\r\n      },\r\n      addVege(){\r\n        this.winding();\r\n        this.seeding();\r\n        this.renderMap();\r\n      },\r\n      seeding(){\r\n        let map2 = new Array(this.config.mapSize);\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          map2[i] = new Array(this.config.mapSize);\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            map2[i][j] = {vegetation: 0};\r\n          }\r\n        }\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            let value = this.map[i][j].vegetation;\r\n            let times = 1+Math.exp(-value/3);\r\n            map2[i][j].vegetation = this.map[i][j].vegetation * times;\r\n          }\r\n        }\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          for (let j = 0; j < this.config.mapSize; j++) {\r\n            this.map[i][j].vegetation = map2[i][j].vegetation;\r\n          }\r\n        }\r\n      },\r\n      winding(){\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            //符合植物生长条件\r\n            if(this.canGrowVegetation(i, j)){\r\n              if(Math.random() < 0.01){\r\n                this.changeVegetation(i-1, j-1, i+1, j+1, 0.5);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      subVege(){\r\n        for(let i=0;i<this.config.mapSize;i++){\r\n          for(let j=0;j<this.config.mapSize;j++){\r\n            if(this.map[i][j].vegetation<1){\r\n              this.map[i][j].vegetation = 0;\r\n            } else {\r\n              this.map[i][j].vegetation *= 0.8;\r\n            }\r\n          }\r\n        }\r\n        this.renderMap();\r\n      },\r\n      changeSeaLevel(value){\r\n        let to = this.config.seaLevel + value;\r\n        if(to>=0){\r\n          this.config.seaLevel = to;\r\n          this.createOvergroundWater();\r\n          this.createUndergroundWater();\r\n          this.renderMap();\r\n        }\r\n      },\r\n    }\r\n  }\r\n</script>\r\n\n\n\n// WEBPACK FOOTER //\n// src/components/eco/eco.vue"],"sourceRoot":""}